<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>H4ns&#39; blog</title>
    <link>https://h4ns21.github.io/blog/</link>
    <description>Recent content on H4ns&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Feb 2022 15:23:29 -0500</lastBuildDate><atom:link href="https://h4ns21.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>247CTF Easy Challs [ Reversing ]</title>
      <link>https://h4ns21.github.io/blog/post/rever247ez/</link>
      <pubDate>Mon, 28 Feb 2022 15:23:29 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/rever247ez/</guid>
      <description>In this post I will show the solution to the easiest challenges in the Reversing category.
The More The Merrier When opening the main code in the IDA tool we notice that there is a variable called unk_6E8 which is moving its content to the rax register.
Let&amp;rsquo;s see what&amp;rsquo;s inside.
We note that inside the variable is the flag we were looking for. It does not show us these characters if we launch the strings command because each character is separated from the next by 3 bytes.</description>
    </item>
    
    <item>
      <title>Common Web Vulns Project [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/commonwebvulns/</link>
      <pubDate>Mon, 28 Feb 2022 13:32:38 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/commonwebvulns/</guid>
      <description>Some time ago I got involved in the world of web vulnerabilities and thanks to several hackers from the Hispanic community we met several days to talk about these vulnerabilities. Time went by and I thought, why don&amp;rsquo;t I make a compilation of the most common vulnerabilities in the bug bounty world? So I created the following repository, I hope you like it!
The only bad thing is that it is in Spanish as it is dedicated to this wonderful community which has helped me a lot on my way!</description>
    </item>
    
    <item>
      <title>Fd pwnable.kr [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/fd-chall/</link>
      <pubDate>Sun, 27 Feb 2022 18:44:48 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/fd-chall/</guid>
      <description>The first thing we have to do when logging into the ssh server is to look at the program code.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&amp;#34;pass argv[1] a number\n&amp;#34;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&amp;#34;LETMEWIN\n&amp;#34;, buf)){ printf(&amp;#34;good job :)\n&amp;#34;); system(&amp;#34;/bin/cat flag&amp;#34;); exit(0); } printf(&amp;#34;learn about Linux file IO\n&amp;#34;); return 0; } Program analysis int fd = atoi( argv[1] ) - 0x1234; Atoi converts a string to an integer.</description>
    </item>
    
    <item>
      <title>Racecar HTB [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/racecar/</link>
      <pubDate>Sun, 27 Feb 2022 18:39:55 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/racecar/</guid>
      <description>Before starting the vulnerability search, we must first perform a basic analysis.
If we look at the strings of the executable and filter by the word &amp;lsquo;flag&amp;rsquo; we realize that there is a file called flag.txt which we assume is hidden.
We are going to debug the executable with the IDA tool.
Inside the car_menu function we have a file called flag.txt which will only be opened if the program flow enters car_menu:loc_FC.</description>
    </item>
    
    <item>
      <title>TakitoChall CYBEX [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/takitochall/</link>
      <pubDate>Sun, 27 Feb 2022 18:35:38 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/takitochall/</guid>
      <description>Introduction The objective of this challenge is to get an RCE, specifically to get the output of the cat /etc/passwd command.
from flask import Flask from flask import request from os import system app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def rce(): ip = request.args.get(&amp;#39;ip&amp;#39;) if ip is None: return &amp;#39;Please use ?ip=127.0.0.1&amp;#39; for char in &amp;#39;&amp;amp;;|$()`&amp;#39;: if char in ip: return &amp;#39;Character {}is blocked&amp;#39;.format(char) system(&amp;#39;ping -c 1 &amp;#39;+ip) return &amp;#39;Ping sent&amp;#39; if __name__ == &amp;#39;__main__&amp;#39;: app.</description>
    </item>
    
    <item>
      <title>Compare the pair 247CTF [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/comparethepair/</link>
      <pubDate>Sun, 27 Feb 2022 18:33:12 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/comparethepair/</guid>
      <description>Description Can you identify a way to bypass our login logic? MD5 is supposed to be a one-way function right?
Solution When opening the challenge link we find a code which is going to be vulnerable because of how PHP compares values.
&amp;lt;?php require_once(&amp;#39;flag.php&amp;#39;); $password_hash = &amp;#34;0e902564435691274142490923013038&amp;#34;; $salt = &amp;#34;f789bbc328a3d1a3&amp;#34;; if(isset($_GET[&amp;#39;password&amp;#39;]) &amp;amp;&amp;amp; md5($salt . $_GET[&amp;#39;password&amp;#39;]) == $password_hash){ echo $flag; } echo highlight_file(__FILE__, true); ?&amp;gt;PHP has a feature called type juggling or type coercion.</description>
    </item>
    
    <item>
      <title>Zoom2win KQ CTF [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/zoom2win/</link>
      <pubDate>Sun, 27 Feb 2022 18:29:07 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/zoom2win/</guid>
      <description>Introduction Let&amp;rsquo;s start this challenge by looking at its description, and see what the author has to tell us about it.
Okay, so we already know that this is a basic ret2win. Let&amp;rsquo;s not waste any more time and start developing the script.
First steps Let&amp;rsquo;s see what type of architecture it has because depending on whether it is x64 or x86_64 there are several modifications to be made in the final code.</description>
    </item>
    
  </channel>
</rss>
