<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on H4ns&#39; blog</title>
    <link>https://h4ns21.github.io/blog/post/</link>
    <description>Recent content in Posts on H4ns&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2022 16:40:06 -0500</lastBuildDate><atom:link href="https://h4ns21.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>247CTF - Tips and tricks [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/beginner/</link>
      <pubDate>Tue, 01 Mar 2022 16:40:06 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/beginner/</guid>
      <description>When activating the challenge we are given a server which when we connect asks us to make a script to make the sum of the two random numbers that we are given and repeat this process 500 times.
The first contact I had with the challenge was with the socket library. I thought it could be done with this library but I got to a point where I didn&amp;rsquo;t know how to proceed.</description>
    </item>
    
    <item>
      <title>247CTF - Challenges [ REVERSING ]</title>
      <link>https://h4ns21.github.io/blog/post/rever/</link>
      <pubDate>Mon, 28 Feb 2022 15:23:29 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/rever/</guid>
      <description>In this post I will show the solution to the easiest challenges in the Reversing category.
THE MORE THE MERRIER [ EASY ] When opening the main code in the IDA tool we notice that there is a weird variable called unk_6E8 which is moving its content to the rax register.
Let&amp;rsquo;s see what&amp;rsquo;s inside.
We notice that it is the flag because of the first 4 characters 247{. These are not shown if we launch the strings command because there are 3 bytes between each one.</description>
    </item>
    
    <item>
      <title>Research of the most common web vulnerabilities [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/commonwebvulns/</link>
      <pubDate>Mon, 28 Feb 2022 13:32:38 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/commonwebvulns/</guid>
      <description>Some time ago I got involved in the world of web vulnerabilities and thanks to several hackers from the Hispanic community we met several days to talk about these vulnerabilities. Time went by and I thought, why don&amp;rsquo;t I make a compilation of the most common vulnerabilities in the bug bounty world? So I created the following repository, I hope you like it!
The only bad thing is that it is in Spanish as it is dedicated to this wonderful community which has helped me a lot on my way.</description>
    </item>
    
    <item>
      <title>Pwnable.kr - fd [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/fd-chall/</link>
      <pubDate>Sun, 27 Feb 2022 18:44:48 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/fd-chall/</guid>
      <description>The first thing we have to do when logging into the ssh server is to look at the program code.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&amp;#34;pass argv[1] a number\n&amp;#34;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&amp;#34;LETMEWIN\n&amp;#34;, buf)){ printf(&amp;#34;good job :)\n&amp;#34;); system(&amp;#34;/bin/cat flag&amp;#34;); exit(0); } printf(&amp;#34;learn about Linux file IO\n&amp;#34;); return 0; } Program analysis int fd = atoi( argv[1] ) - 0x1234; Atoi converts a string to an integer.</description>
    </item>
    
    <item>
      <title>HTB - Racecar [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/racecar/</link>
      <pubDate>Sun, 27 Feb 2022 18:39:55 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/racecar/</guid>
      <description>Before starting the vulnerability search, we must first perform a basic analysis.
If we look at the strings of the executable and filter by the word &amp;lsquo;flag&amp;rsquo; we realize that there is a file called flag.txt which we assume is hidden.
We are going to debug the executable with the IDA tool.
Inside the car_menu function we have a file called flag.txt which will only be opened if the program flow enters car_menu:loc_FC.</description>
    </item>
    
    <item>
      <title>CYBEX - TakitoChall [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/takitochall/</link>
      <pubDate>Sun, 27 Feb 2022 18:35:38 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/takitochall/</guid>
      <description>Introduction The objective of this challenge is to get an RCE, specifically to get the output of the cat /etc/passwd command.
from flask import Flask from flask import request from os import system app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def rce(): ip = request.args.get(&amp;#39;ip&amp;#39;) if ip is None: return &amp;#39;Please use ?ip=127.0.0.1&amp;#39; for char in &amp;#39;&amp;amp;;|$()`&amp;#39;: if char in ip: return &amp;#39;Character {}is blocked&amp;#39;.format(char) system(&amp;#39;ping -c 1 &amp;#39;+ip) return &amp;#39;Ping sent&amp;#39; if __name__ == &amp;#39;__main__&amp;#39;: app.</description>
    </item>
    
    <item>
      <title>247CTF - Compare the pair [ WEB ]</title>
      <link>https://h4ns21.github.io/blog/post/comparethepair/</link>
      <pubDate>Sun, 27 Feb 2022 18:33:12 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/comparethepair/</guid>
      <description>Description Can you identify a way to bypass our login logic? MD5 is supposed to be a one-way function right?
Solution When opening the challenge link we find a code which is going to be vulnerable because of how PHP compares values.
&amp;lt;?php require_once(&amp;#39;flag.php&amp;#39;); $password_hash = &amp;#34;0e902564435691274142490923013038&amp;#34;; $salt = &amp;#34;f789bbc328a3d1a3&amp;#34;; if(isset($_GET[&amp;#39;password&amp;#39;]) &amp;amp;&amp;amp; md5($salt . $_GET[&amp;#39;password&amp;#39;]) == $password_hash){ echo $flag; } echo highlight_file(__FILE__, true); ?&amp;gt;PHP has a feature called type juggling or type coercion.</description>
    </item>
    
    <item>
      <title>KQ CTF - Zoom2win [ PWN ]</title>
      <link>https://h4ns21.github.io/blog/post/zoom2win/</link>
      <pubDate>Sun, 27 Feb 2022 18:29:07 -0500</pubDate>
      
      <guid>https://h4ns21.github.io/blog/post/zoom2win/</guid>
      <description>Introduction Let&amp;rsquo;s start this challenge by looking at its description, and see what the author has to tell us about it.
Okay, so we already know that this is a basic ret2win. Let&amp;rsquo;s not waste any more time and start developing the script.
First steps Let&amp;rsquo;s see what type of architecture it has because depending on whether it is x64 or x86_64 there are several modifications to be made in the final code.</description>
    </item>
    
  </channel>
</rss>
